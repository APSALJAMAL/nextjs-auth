// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
  // output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                         String    @id @default(uuid())
  email                      String    @unique
  name                       String?
  displayName                String?
  profileImageUrl            String?
  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt
  deletedAt                  DateTime?
  primaryEmail               String?
  primaryEmailVerified       Boolean   @default(false)
  lastActiveAtMillis         BigInt?
  signedUpAtMillis           BigInt?
  isAnonymous                Boolean   @default(false)
  hasPassword                Boolean   @default(false)
  otpAuthEnabled             Boolean   @default(false)
  passkeyAuthEnabled         Boolean   @default(false)
  primaryEmailAuthEnabled    Boolean   @default(false)
  requiresTotpMfa            Boolean   @default(false)
  authWithEmail              Boolean   @default(false)

  // Optional JSON fields
  rawJson                    Json?
  clientMetadata             Json?
  clientReadOnlyMetadata     Json?
  serverMetadata             Json?
  oauthProviders             Json?

  selectedTeam               String?
  selectedTeamId             String?

  // Role (single role per user). Change to relations if you want many-to-many roles later.
  role                       Role      @default(USER)

  // Back-relations
  applicants                 Applicant[]        // applicant records created by this user (if any)

}

enum Role {
  USER
  ADMIN
  GUEST
}

model Applicant {
  id             String   @id @default(uuid())
  userId         String?  // link to User if logged in
  fullName       String
  contactNumber  String
  email          String?
  address        String
  governmentId   String   // Aadhaar/Passport/License
  reason         String
  status         ApplicationStatus @default(PENDING)

  // New fields for pass validity
  validFrom      DateTime?
  validTo        DateTime?

  passType     EPassType @default(PERSONAL)

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user           User?    @relation(fields: [userId], references: [id])
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}


enum EPassType {
  PERSONAL       // individual / emergency travel // 1 day
  ORGANIZATION   // essential worker / staff // 1 week
  INTER_DISTRICT // district-to-district travel // 3 days
  INTER_STATE    // state-to-state travel // 7 days
  VEHICLE        // logistics/goods transport // 30 days
}